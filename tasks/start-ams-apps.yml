---

- name: ping marathon consul to check if it is ready
  shell: "curl --silent -k -u {{marathon_username}}:{{marathon_password}} {{marathon_protocol}}://marathon.service.consul:{{marathon_port}}/ping"
  register: result_ping
  until: result_ping.stdout.find("pong") != -1
  retries: 20
  delay: 30

- name: start AMS squid
  run_once: true
  uri: 
    url: "{{marathon_protocol}}://marathon.service.consul:{{marathon_port}}/v2/apps/amssquid"
    force_basic_auth: yes
    user: "{{marathon_username}}"
    password: "{{marathon_password}}"
    validate_certs: no
    method: PUT
    headers:
      Content-Type: "application/json"
    body: "{{ lookup('template', 'templates/amssquid-app.json') }}"
    body_format: json
    status_code: [200, 201]
    return_content: yes
  retries: 10
  delay: 20
  changed_when: false
  when: ams_use_local_squid == True
  tags:
    - ams_apps

- name: wait for ams squid to be up and running 
  wait_for: 
     host: "{{ams_config_squid_host}}" 
     port: "{{ams_config_squid_port}}"
     delay: 20
     timeout: 600
     connect_timeout: 10
  when: ams_use_local_squid == True
  tags:
    - ams_apps

# - name: debug url
#   debug:
#     msg: "{{marathon_protocol}}://marathon.service.consul:{{marathon_port}}/v2/apps/condor_cm"

# - name: user and passwd
#   debug:
#     msg: "{{marathon_username}}:{{marathon_password}}"

# - name: debug template
#   debug:
#     msg: "{{ lookup('template', 'templates/condor_cm.json') }}"

- name: wait for central manager
  shell: "curl --silent -u {{marathon_username}}:{{marathon_password}} {{marathon_protocol}}://marathon.service.consul:{{marathon_port}}/v2/apps/condorcm"
  register: result_cm
  until: result_cm.stdout | from_json | json_query('app.tasks[0].state') == "TASK_RUNNING"
  retries: 10
  delay: 120

- name: wait for schedd
  shell: "curl --silent -u {{marathon_username}}:{{marathon_password}} {{marathon_protocol}}://marathon.service.consul:{{marathon_port}}/v2/apps/condorschedd"
  register: result_schedd
  until: result_schedd.stdout | from_json | json_query('app.tasks[0].state') == "TASK_RUNNING"
  retries: 10
  delay: 120

- name: start AMS Schedd
  run_once: true
  uri:
    url: "{{marathon_protocol}}://marathon.service.consul:{{marathon_port}}/v2/apps/condorschedd?force=true"
    force_basic_auth: yes
    user: "{{marathon_username}}"
    password: "{{marathon_password}}"
    validate_certs: no
    method: PUT
    headers:
      Content-Type: "application/json"
    body: "{{ lookup('template', 'templates/condor_schedd.json') }}"
    body_format: json
    # status_code: [200]
    status_code: [200, 201, 409]  # app created, deployment started, already running deployment
    return_content: yes
  retries: 10
  delay: 20
  changed_when: false
  tags:
    - ams_apps

- name: start AMS worker nodes
  run_once: true
  uri:
    url: "{{marathon_protocol}}://marathon.service.consul:{{marathon_port}}/v2/apps/condorwn?force=true"
    force_basic_auth: yes
    user: "{{marathon_username}}"
    password: "{{marathon_password}}"
    validate_certs: no
    method: PUT
    headers:
      Content-Type: "application/json"
    # Template has privileged because it can have access to host devices
    # and it is in BRIDGE mode to have different hostname for
    # condor nodes, otherwise they can't be recognized by master
    body: "{{ lookup('template', 'templates/condor_wn.json') }}"
    body_format: json
    status_code: [200, 201]  # app created, deployment started
    return_content: yes
  retries: 10
  delay: 20
  changed_when: false
  tags:
    - ams_apps

- name: start AMS cvmfs check
  run_once: true
  uri: 
     url: "{{marathon_protocol}}://marathon.service.consul:{{marathon_port}}/v2/apps/cvmfscheck"
     user: "{{marathon_username}}"
     password: "{{marathon_password}}"
     validate_certs: "no"
     method: PUT
     HEADER_Content-Type: "application/json"
     body: "{{ lookup('template', 'templates/cvmfskeepalive.json') }}"
     body_format: json
  register: result
  until: result.status == 200
  retries: 10
  delay: 20
  changed_when: false
  tags:
    - ams_apps
